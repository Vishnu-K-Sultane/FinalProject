using AutoMapper;
using FinalProject.Contracts;
using FinalProject.Service.Contract;
using FinalProject.Shared;
using FinalProject.Entities.Models;
using System;
using System.Collections.Generic;

namespace FinalProject.Services
{
    /// <summary>
    /// Service class for managing room-related operations.
    /// </summary>
    public class RoomService : IRoomService
    {
        private readonly IRepositoryManager _repository;
        private readonly IMapper _mapper;
        private readonly ILoggerManager _logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomService"/> class.
        /// </summary>
        /// <param name="repositoryManager">The repository manager.</param>
        /// <param name="mapper">The mapper.</param>
        public RoomService(IRepositoryManager repositoryManager, ILoggerManager logger, IMapper mapper)
        {
            _repository = repositoryManager;
            _mapper = mapper;
        }

        /// <summary>
        /// Retrieves all rooms, optionally tracking changes.
        /// </summary>
        /// <param name="trackChanges">Indicates whether to track changes.</param>
        /// <returns>A collection of RoomDto objects.</returns>
        public IEnumerable<RoomDto> GetAllRooms(bool trackChanges)
        {
            var rooms = _repository.Room.GetAllRooms(trackChanges);
            return _mapper.Map<IEnumerable<RoomDto>>(rooms);
        }

        /// <summary>
        /// Retrieves a room by its ID, optionally tracking changes.
        /// </summary>
        /// <param name="id">The ID of the room.</param>
        /// <param name="trackChanges">Indicates whether to track changes.</param>
        /// <returns>A RoomDto object.</returns>
        public RoomDto GetRoomById(int id, bool trackChanges)
        {
            var room = _repository.Room.GetRoomById(id, trackChanges);
            return _mapper.Map<RoomDto>(room);
        }

        /// <summary>
        /// Creates a new room.
        /// </summary>
        /// <param name="roomDto">The room data transfer object.</param>
        public RoomDto CreateRoom(RoomDto roomDto)
        {
            // Map DTO to entity
            var room = _mapper.Map<Room>(roomDto);

            // Assuming RoomId is identity (auto-generated by DB), don't set room.RoomId manually

            _repository.Room.CreateRoom(room);
            _repository.Save();

            // Map back the saved entity to DTO to include new generated RoomId
            return _mapper.Map<RoomDto>(room);
        }


        /// <summary>
        /// Updates an existing room.
        /// </summary>
        /// <param name="id">The ID of the room.</param>
        /// <param name="roomDto">The room data transfer object.</param>
        /// <param name="trackChanges">Indicates whether to track changes.</param>
        /// <exception cref="Exception">Thrown when the room with the specified ID is not found.</exception>
        public void UpdateRoom(int id, RoomDto roomDto, bool trackChanges)
        {
            var roomEntity = _repository.Room.GetRoomById(id, trackChanges);
            if (roomEntity == null) throw new Exception("Room not found");

            _mapper.Map(roomDto, roomEntity);
            _repository.Save();
        }

        /// <summary>
        /// Deletes a room by its ID.
        /// </summary>
        /// <param name="id">The ID of the room.</param>
        /// <param name="trackChanges">Indicates whether to track changes.</param>
        /// <exception cref="Exception">Thrown when the room with the specified ID is not found.</exception>
        public void DeleteRoom(int id, bool trackChanges)
        {
            var room = _repository.Room.GetRoomById(id, trackChanges);
            if (room == null) throw new Exception("Room not found");

             _repository.Room.DeleteRoom(room);
            _repository.Save();
        }
    }
}
